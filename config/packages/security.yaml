security:
  #voter strategy
  access_decision_manager:
    strategy: affirmative
  #passworf encrpytion
  encoders:
    App\Entity\User: bcrypt

    Symfony\Component\Security\Core\User\User: plaintext
  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    database_users:
      entity: { class: App\Entity\User, property: username }
#    my_in_memory:
#      memory:
#        users:
#          john:
#            password: "helloJohn"
#            roles: 'ROLE_USER'
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      anonymous: true
      lazy: true
      pattern: ^/
      user_checker: App\Security\UserEnabledChecker

     # provider: users_in_memory

#      http_basic:
#        realm: my_in_memory
      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#firewalls-authentication

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

      form_login:
        check_path: security_login
        login_path: security_login
        csrf_token_generator: security.csrf.token_manager
        default_target_path: micro_post_index
#        always_use_default_target_path: false
#        use_referer: true
#        failure_path:
        username_parameter: _username
        password_parameter: _password
        csrf_parameter: _csrf_token


      logout:
        path: security_logout
        target: micro_post_index



  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    # - { path: ^/admin, roles: ROLE_ADMIN }
    # - { path: ^/profile, roles: ROLE_USER }
#    - { path: ^/micro-post, roles: ROLE_USER }
  role_hierarchy:
      ROLE_ADMIN: ROLE_USER